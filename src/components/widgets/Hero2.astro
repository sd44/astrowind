---
import Image from '~/components/common/Image.astro';
import Button from '~/components/ui/Button.astro';

import type { Hero as Props } from '~/types';

const {
  title = await Astro.slots.render('title'),
  subtitle = await Astro.slots.render('subtitle'),
  tagline,

  content = await Astro.slots.render('content'),
  actions = await Astro.slots.render('actions'),
  image = await Astro.slots.render('image'),

  id,
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<section class="relative md:-mt-[76px] not-prose" {...id ? { id } : {}}>
  <div class="absolute inset-0 pointer-events-none" aria-hidden="true">
    <slot name="bg">
      {bg ? <Fragment set:html={bg} /> : null}
    </slot>
  </div>
  <div class="relative mx-auto px-4 sm:px-6 max-w-7xl">
    <div class="pt-0 md:pt-[36px] pointer-events-none"></div>
    <div class="lg:flex lg:items-center lg:gap-16 py-8 md:py-14 lg:py-20">
      <div class="mx-auto pb-10 md:pb-16 lg:text-left text-center basis-2/5">
        {
          tagline && (
            <p
              class="motion-safe:md:opacity-0 font-bold text-secondary dark:text-blue-200 text-base uppercase tracking-wide motion-safe:md:intersect:animate-fade intersect-once intersect-quarter"
              set:html={tagline}
            />
          )
        }
        {
          title && (
            <h1
              class="motion-safe:md:opacity-0 mt-4 mb-6 font-heading font-bold dark:text-gray-200 text-4xl md:text-5xl leading-tighter tracking-tighter motion-safe:md:intersect:animate-fade intersect-once intersect-quarter"
              set:html={title}
            />
          )
        }
        <div class="mx-auto lg:max-w-none max-w-3xl">
          {
            subtitle && (
              <p
                class="motion-safe:md:opacity-0 mb-8 text-muted dark:text-slate-300 text-xl motion-safe:md:intersect:animate-fade intersect-once intersect-quarter"
                set:html={subtitle}
              />
            )
          }

          {
            actions && (
              <div class="flex sm:flex-row flex-col flex-nowrap sm:justify-center lg:justify-start gap-4 motion-safe:md:opacity-0 m-auto lg:m-0 max-w-xs sm:max-w-md lg:max-w-7xl motion-safe:md:intersect:animate-fade intersect-once intersect-quarter">
                {Array.isArray(actions) ? (
                  actions.map((action) => (
                    <div class="flex w-full sm:w-auto">
                      <Button {...(action || {})} class="sm:mb-0 w-full" />
                    </div>
                  ))
                ) : (
                  <Fragment set:html={actions} />
                )}
              </div>
            )
          }
        </div>
        {content && <div class="mt-8"><Fragment set:html={content} /></div>}
      </div>
      <div class="basis-3/5">
        {
          image && (
            <div class="relative motion-safe:md:opacity-0 m-auto max-w-5xl aspect-3/2 motion-safe:md:intersect:animate-fade intersect-once intersect-no-queue intersect-quarter">
              {typeof image === 'string' ? (
                <Fragment set:html={image} />
              ) : (
                <Image
                  class="mx-auto rounded-md w-full h-full object-cover"
                  widths={[400, 768, 1024, 2040]}
                  sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                  loading="eager"
                  width={900}
                  height={648}
                  {...image}
                />
              )}
            </div>
          )
        }
      </div>
    </div>
  </div>
</section>
